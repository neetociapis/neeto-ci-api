{
  "openapi": "3.0.0",
  "servers": [
    {
      "description": "NeetoCal APIs",
      "url": "https://{workspace}.neetocal.com/api/external/v1",
      "variables": {
        "workspace": {
          "default": "spinkart",
          "description": "Your workspace's subdomain"
        }
      }
    }
  ],
  "info": {
    "description": "NeetoCal offers APIs to manage bookings from external channels. To use the APIs, [you will need an API key.](https://help.neetocal.com/articles/api-keys)",
    "title": "NeetoCal APIs"
  },
  "tags": [
    {
      "name": "Bookings",
      "description": "APIs to create, list, reschedule, and cancel bookings."
    },
    {
      "name": "Slots",
      "description": "APIs to manage slots availability of a scheduling link."
    },
    {
      "name": "Availabilities",
      "description": "APIs to manage availabilities of meeting hosts."
    },
    {
      "name": "Scheduling links",
      "description": "APIs to create and manage scheduling links."
    },
    {
      "name": "Team Members",
      "description": "APIs to manage team members in the workspace."
    },
    {
      "name": "Packages",
      "description": "APIs to manage packages of the workspace."
    },
    {
      "name": "Discount codes",
      "description": "APIs to manage discount codes for bookings."
    },
    {
      "name": "Forms",
      "description": "APIs to manage forms in the workspace."
    },
    {
      "name": "Submissions",
      "description": "APIs to manage form submissions in the workspace."
    }
  ],
  "components": {
    "schemas": {
      "Pagination": {
        "type": "object",
        "properties": {
          "total_records": {
            "type": "integer",
            "description": "Total number of records"
          },
          "total_pages": {
            "type": "integer",
            "description": "Total number of pages available"
          },
          "current_page_number": {
            "type": "integer",
            "description": "Current page number"
          },
          "page_size": {
            "type": "integer",
            "description": "Number of records per page"
          }
        }
      },
      "Booking": {
        "type": "object"
      },
      "BookingListResponse": {
        "type": "object",
        "properties": {
          "bookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Booking"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Meeting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "kind": {
            "type": "string",
            "enum": [
              "one_on_one",
              "round_robin",
              "multihost",
              "grouped"
            ]
          },
          "duration": {
            "type": "integer"
          },
          "disabled": {
            "type": "boolean"
          },
          "spot": {
            "type": "string",
            "enum": [
              "custom",
              "jitsi",
              "google_meet",
              "daily",
              "zoom",
              "whereby",
              "teams",
              "phone_call",
              "in_person"
            ]
          },
          "spot_in_person_location": {
            "type": "string",
            "nullable": true
          },
          "spot_custom_text": {
            "type": "string",
            "nullable": true
          },
          "spot_phone_call_number": {
            "type": "string",
            "nullable": true
          },
          "is_template": {
            "type": "boolean"
          },
          "schedulable_range_type": {
            "type": "string",
            "enum": [
              "number_of_days_into_the_future",
              "number_of_business_days_into_the_future",
              "date_range"
            ]
          },
          "schedulable_range_value": {
            "type": "string"
          },
          "lead_time": {
            "type": "integer"
          },
          "start_time_increment": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "example": "2024-12-23T05:05:27.037Z"
          },
          "updated_at": {
            "type": "string",
            "example": "2025-03-31T13:22:19.832Z"
          },
          "deleted_at": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "is_multiple_spots_allowed": {
            "type": "boolean"
          },
          "is_multiple_durations_allowed": {
            "type": "boolean"
          },
          "conditional_pricing_enabled": {
            "type": "boolean"
          },
          "is_email_reminders_enabled": {
            "type": "boolean"
          },
          "is_sms_reminders_enabled": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string"
          },
          "rescheduling_lead_time": {
            "type": "integer"
          },
          "cancellation_lead_time": {
            "type": "integer"
          },
          "booking_modification_allowed": {
            "type": "boolean"
          },
          "cancellation_too_late_notice": {
            "type": "string",
            "nullable": true
          },
          "cancellation_policy": {
            "type": "string",
            "nullable": true
          },
          "rescheduling_too_late_notice": {
            "type": "string",
            "nullable": true
          },
          "pre_booking_allowed": {
            "type": "boolean"
          },
          "original_price_enabled": {
            "type": "boolean"
          },
          "original_price": {
            "type": "number",
            "nullable": true
          },
          "fees": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "durations_possible": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "MeetingListResponse": {
        "type": "object",
        "properties": {
          "meetings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Meeting"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      }
    }
  },
  "paths": {
    "/slots/{meeting_slug}": {
      "get": {
        "summary": "List all available slots",
        "tags": [
          "Slots"
        ],
        "description": "This API allows to get a list of available slots of the host (or hosts in the case of multi-host or round-robin meetings) for a specific scheduling link for a given month. These slots can later be used to book a meeting. Replace `spinkart` with your workspace's subdomain.\n",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "meeting_slug",
            "description": "Slug of the scheduling link.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "meeting-with-oliver-smith"
            }
          },
          {
            "in": "query",
            "name": "time_zone",
            "description": "Time zone in which to check available slots.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Asia/Kolkata"
            }
          },
          {
            "in": "query",
            "name": "year",
            "description": "Year for which to check available slots.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025"
            }
          },
          {
            "in": "query",
            "name": "month",
            "description": "Month for which to check available slots.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "11"
            }
          },
          {
            "in": "query",
            "name": "day",
            "description": "The day of the month to check for available slots. If omitted, slots for all days in the month will be returned. If provided, only slots for the specified day will be included.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "21"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "slots": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string"
                          },
                          "day": {
                            "type": "integer"
                          },
                          "slots": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "start_time": {
                                  "type": "string"
                                },
                                "end_time": {
                                  "type": "string"
                                },
                                "count": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "501": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bookings": {
      "post": {
        "summary": "Make a booking",
        "tags": [
          "Bookings"
        ],
        "description": "This API allows to make a booking for a specific scheduling link, either in a particular slot or in the first available slot. To book the first available slot, remove `slot_date` and `slot_start_time` from the request body. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meeting_slug": {
                    "type": "string",
                    "description": "Slug of scheduling link you want to book.",
                    "example": "meeting-with-oliver-smith"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of person making the booking.",
                    "example": "Eve Smith"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email of person making the booking.",
                    "example": "eve@example.com"
                  },
                  "slot_date": {
                    "type": "string",
                    "description": "Date on which you want to book. This should be in \"YYYY-MM-DD\" format. If `slot_date` and `slot_start_time` are not provided then the first available slot will be booked.",
                    "example": "2025-07-15"
                  },
                  "slot_start_time": {
                    "type": "string",
                    "description": "Start time for the booking. This should be in \"HH:MM AM/PM\" format.",
                    "example": "01:30 PM"
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "Time zone of person making the booking.",
                    "example": "Asia/Kolkata"
                  },
                  "preferred_meeting_spot": {
                    "type": "string",
                    "description": "Your preferred meeting spot. This field is optional. The default is \"jitsi\". Before passing this value, ensure that the corresponding meeting spot is configured in the \"Where\" section of the scheduling link.\n",
                    "example": "jitsi",
                    "enum": [
                      "custom",
                      "jitsi",
                      "in_person",
                      "daily",
                      "zoom",
                      "whereby",
                      "google_meet",
                      "teams"
                    ],
                    "default": "jitsi"
                  },
                  "form_responses": {
                    "type": "object",
                    "description": "Responses for the questions of booking form (optional). The key of the field should be the field code of the question. The field code can be found in scheduling link's Settings -> Questions -> 3 dot menu of the question -> Edit -> Advanced properties. You can specify guest emails using the `guest_email_s` field code.",
                    "properties": {
                      "guest_email_s": {
                        "type": "array",
                        "description": "Array of guest emails for the booking. The default field code is \"guest_email_s\". You can change this by editing the Guest email(s) question, and changing the field code in advanced properties.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "guest_email_s": [
                        "sam@example.com",
                        "charlie@example.com"
                      ],
                      "language": "English"
                    }
                  }
                },
                "required": [
                  "meeting_slug",
                  "name",
                  "email",
                  "time_zone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "sid": {
                      "type": "string"
                    },
                    "parent_booking_id": {
                      "type": "string",
                      "nullable": true
                    },
                    "email": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "host_name": {
                      "type": "string"
                    },
                    "host_email": {
                      "type": "string"
                    },
                    "is_multihost": {
                      "type": "boolean"
                    },
                    "multihosts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "starts_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "ends_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "time_zone": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "cancel_reason": {
                      "type": "string",
                      "nullable": true
                    },
                    "cancelled_by": {
                      "type": "string",
                      "nullable": true
                    },
                    "reschedule_requested": {
                      "type": "boolean"
                    },
                    "room_type": {
                      "type": "string",
                      "nullable": true
                    },
                    "room_url": {
                      "type": "string",
                      "nullable": true
                    },
                    "room_id": {
                      "type": "string",
                      "nullable": true
                    },
                    "spot_details": {
                      "type": "string",
                      "nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "meeting_id": {
                      "type": "string"
                    },
                    "no_show": {
                      "type": "boolean"
                    },
                    "notes_url": {
                      "type": "string",
                      "nullable": true
                    },
                    "internal_notes": {
                      "type": "string",
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true
                    },
                    "admin_booking_url": {
                      "type": "string"
                    },
                    "client_booking_url": {
                      "type": "string"
                    },
                    "form_responses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "field": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "field_code": {
                            "type": "string"
                          },
                          "Name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "summary": "List all bookings",
        "tags": [
          "Bookings"
        ],
        "description": "This API allows to get a list of bookings in a workspace. The bookings can be filtered based on client email, host email, type of meeting, meeting start time or meeting end time. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "To get the bookings of a particular type only. The available types are upcoming, past, cancelled, and incomplete. If no value is passed it will default to all bookings.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_number",
            "description": "Page number. The default value is 1.",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of bookings to receive. The default value is 30.",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "host_email",
            "description": "To get the bookings of a particular host only.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "client_email",
            "description": "To get the bookings of a particular client only.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Apply filters on your bookings.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "starts_at": {
                  "type": "object",
                  "description": "To filter bookings by meeting start time, use deep object style in the query string, e.g.:\n`?filters[starts_at][rule]=after&filters[starts_at][value]=2027-12-19T06:00:00.000Z`\n- Supported rules: at, after, before, between\n- Value: a single UTC datetime string for at/after/before, or two comma-separated UTC datetime strings for between.\n",
                  "properties": {
                    "rule": {
                      "type": "string",
                      "enum": [
                        "at",
                        "after",
                        "before",
                        "between"
                      ],
                      "description": "The rule to be used for comparing with the starts_at value"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "ends_at": {
                  "type": "object",
                  "description": "To filter bookings by meeting end time, use deep object style in the query string, e.g.:\n`?filters[ends_at][rule]=before&filters[ends_at][value]=2027-12-19T10:00:00.000Z`\n- Supported rules: at, after, before, between\n- Value: a single UTC datetime string for at/after/before, or two comma-separated UTC datetime strings for between.\n",
                  "properties": {
                    "rule": {
                      "type": "string",
                      "enum": [
                        "at",
                        "after",
                        "before",
                        "between"
                      ],
                      "description": "The rule to be used for comparing with the ends_at value"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "in": "query",
            "name": "sorting_order",
            "description": "Sort bookings by booking creation date. The default value is `desc`.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingListResponse"
                },
                "example": {
                  "bookings": [],
                  "pagination": {
                    "total_records": 535,
                    "total_pages": 268,
                    "current_page_number": 1,
                    "page_size": 30
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bookings/{booking_sid}": {
      "patch": {
        "summary": "Reschedule a booking",
        "tags": [
          "Bookings"
        ],
        "description": "This API allows to reschedule the booking to a different slot. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "booking_sid",
            "description": "Id of booking that you want to reschedule.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "hda6gxy"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of person making the booking.",
                    "example": "Eve Smith"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email of person making the booking.",
                    "example": "eve@example.com"
                  },
                  "slot_date": {
                    "type": "string",
                    "description": "Date on which the booking is to be rescheduled. This should be in \"YYYY-MM-DD\" format.",
                    "example": "2025-07-25"
                  },
                  "slot_start_time": {
                    "type": "string",
                    "description": "Start time for the booking. This should be in \"HH:MM AM/PM\" format.",
                    "example": "10:30 AM"
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "Time zone of person rescheduling the booking.",
                    "example": "Asia/Kolkata"
                  },
                  "form_responses": {
                    "type": "object",
                    "description": "Responses for the questions of booking form (optional). The key of the field should be the field code of the question. The field code can be found in scheduling link's Settings -> Questions -> 3 dot menu of the question -> Edit -> Advanced properties. You can specify guest emails using the `guest_email_s` field code.",
                    "properties": {
                      "guest_email_s": {
                        "type": "array",
                        "description": "Array of guest emails for the booking. The default field code is \"guest_email_s\". You can change this by editing the Guest email(s) question, and changing the field code in advanced properties.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "guest_email_s": [
                        "sam@example.com",
                        "charlie@example.com"
                      ],
                      "language": "English"
                    }
                  },
                  "reschedule_reason": {
                    "type": "string",
                    "description": "Reason for rescheduling the booking (optional).",
                    "example": "I want to change the booking time"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "slot_date",
                  "slot_start_time",
                  "time_zone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Booking reschedule successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "sid": {
                      "type": "string"
                    },
                    "parent_booking_id": {
                      "type": "string",
                      "nullable": true
                    },
                    "email": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "host_name": {
                      "type": "string"
                    },
                    "host_email": {
                      "type": "string"
                    },
                    "is_multihost": {
                      "type": "boolean"
                    },
                    "multihosts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "starts_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "ends_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "time_zone": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "cancel_reason": {
                      "type": "string",
                      "nullable": true
                    },
                    "cancelled_by": {
                      "type": "string",
                      "nullable": true
                    },
                    "reschedule_requested": {
                      "type": "boolean"
                    },
                    "room_type": {
                      "type": "string",
                      "nullable": true
                    },
                    "room_url": {
                      "type": "string",
                      "nullable": true
                    },
                    "room_id": {
                      "type": "string",
                      "nullable": true
                    },
                    "spot_details": {
                      "type": "string",
                      "nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "meeting_id": {
                      "type": "string"
                    },
                    "no_show": {
                      "type": "boolean"
                    },
                    "notes_url": {
                      "type": "string",
                      "nullable": true
                    },
                    "internal_notes": {
                      "type": "string",
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true
                    },
                    "admin_booking_url": {
                      "type": "string"
                    },
                    "client_booking_url": {
                      "type": "string"
                    },
                    "form_responses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "field": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "field_code": {
                            "type": "string"
                          },
                          "Name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bookings/{booking_sid}/cancel": {
      "post": {
        "summary": "Cancel a booking",
        "tags": [
          "Bookings"
        ],
        "description": "This API allows to cancel a booking. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "booking_sid",
            "description": "Id of the booking that you want to cancel.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "hda6gxy"
            }
          },
          {
            "in": "query",
            "name": "cancel_reason",
            "description": "Reason for cancelling the booking.",
            "example": "I am not available",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Booking cancel successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/availabilities/{availability_id}": {
      "patch": {
        "summary": "Update an availability",
        "tags": [
          "Availabilities"
        ],
        "description": "This API allows to update an availability. Replace `spinkart` with your workspace's subdomain. You can also set an availability override for specific days.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "availability_id",
            "description": "Id of the availability can be retrieved by going to the particular availability page, and copying it from the URL.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5ybe3cq"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "periods": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "wday": {
                          "type": "string",
                          "description": "The weekday (e.g., \"monday\", \"tuesday\", etc.)."
                        },
                        "start_time": {
                          "type": "string",
                          "description": "Start time in \"HH:MM AM/PM\" format."
                        },
                        "end_time": {
                          "type": "string",
                          "description": "End time in \"HH:MM AM/PM\" format."
                        }
                      }
                    },
                    "example": [
                      {
                        "wday": "monday",
                        "start_time": "09:00 AM",
                        "end_time": "05:00 PM"
                      },
                      {
                        "wday": "tuesday",
                        "start_time": "11:00 AM",
                        "end_time": "04:00 PM"
                      }
                    ]
                  },
                  "overrides": {
                    "type": "array",
                    "description": "To set an override for specific days. To set a date as unavailable, pass a blank array to the periods property. You can remove existing overrides by omitting the periods property.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "description": "The date (e.g, \"2025-03-07\")"
                        },
                        "periods": {
                          "type": "array",
                          "description": "Set as blank ( [] ) to set a date as unavailable.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "wday": {
                                "type": "string",
                                "description": "The weekday (e.g., \"monday\", \"tuesday\", etc.)."
                              },
                              "start_time": {
                                "type": "string",
                                "description": "Start time in \"HH:MM AM/PM\" format."
                              },
                              "end_time": {
                                "type": "string",
                                "description": "End time in \"HH:MM AM/PM\" format."
                              }
                            }
                          }
                        }
                      }
                    },
                    "example": [
                      {
                        "date": "2025-03-07",
                        "periods": [
                          {
                            "wday": "tuesday",
                            "start_time": "11:00 AM",
                            "end_time": "04:00 PM"
                          }
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "periods"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Availability updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "sid": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "default": {
                          "type": "boolean"
                        },
                        "after_buffer_time": {
                          "type": "integer"
                        },
                        "before_buffer_time": {
                          "type": "integer"
                        },
                        "periods": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "wday": {
                                "type": "string"
                              },
                              "start_time": {
                                "type": "string"
                              },
                              "end_time": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "summary": "Get details about an availability",
        "tags": [
          "Availabilities"
        ],
        "description": "This API allows to get details about an availability. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "availability_id",
            "description": "Id of the availability can be retrieved by going to the particular availability page, and copying it from the URL.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "5ybe3cq"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "availability": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "sid": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "default": {
                          "type": "boolean"
                        },
                        "after_buffer_time": {
                          "type": "integer"
                        },
                        "before_buffer_time": {
                          "type": "integer"
                        },
                        "periods": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "wday": {
                                "type": "string"
                              },
                              "start_time": {
                                "type": "string"
                              },
                              "end_time": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/availabilities/team_member": {
      "get": {
        "summary": "List all availabilities of a team member",
        "tags": [
          "Availabilities"
        ],
        "description": "This API allows to list availabilities of a team member in the workspace. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "Email of the team member whose availabilities should be listed.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "oliver@spinkart.com"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of availabilities to receive. The default value is 30.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "availabilities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "sid": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "default": {
                            "type": "boolean"
                          },
                          "after_buffer_time": {
                            "type": "integer"
                          },
                          "before_buffer_time": {
                            "type": "integer"
                          },
                          "periods": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "wday": {
                                  "type": "string"
                                },
                                "start_time": {
                                  "type": "string"
                                },
                                "end_time": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total_records": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "current_page_number": {
                          "type": "integer"
                        },
                        "page_size": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/availabilities": {
      "get": {
        "summary": "List all availabilities of the team members",
        "tags": [
          "Availabilities"
        ],
        "description": "This API allows to list all the availabilities of specified team members by passing their emails as query parameters. Replace `spinkart` with your workspace's subdomain. To request availabilities for multiple members, use repeated `emails[]` query parameters (e.g., `/api/external/v1/availabilities?emails[]=oliver@example.com&emails[]=cypress@example.com`).\n",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emails[]",
            "description": "Email address of a team member whose availabilities should be listed. Repeat this key to include multiple emails.\n",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email",
              "example": "oliver@spinkart.com"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of availabilities to receive. The default value is 30.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "availabilities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "sid": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "default": {
                            "type": "boolean"
                          },
                          "after_buffer_time": {
                            "type": "integer"
                          },
                          "before_buffer_time": {
                            "type": "integer"
                          },
                          "periods": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "wday": {
                                  "type": "string"
                                },
                                "start_time": {
                                  "type": "string"
                                },
                                "end_time": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total_records": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "current_page_number": {
                          "type": "integer"
                        },
                        "page_size": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/meetings": {
      "get": {
        "summary": "List all scheduling links",
        "tags": [
          "Scheduling links"
        ],
        "description": "This API allows to get a list of scheduling links in a workspace.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "Bearer token for API access.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_number",
            "description": "Page number. The default value is 1.",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of bookings to receive. The default value is 30.",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingListResponse"
                },
                "example": {
                  "meetings": [
                    {
                      "id": "0b947f19-94a3-409b-ae3b-36d79a1b4969",
                      "sid": "q2fnyb8",
                      "name": "Meeting with Oliver Smith",
                      "slug": "meet",
                      "description": "Schedule a one-on-one meeting with Oliver Smith.",
                      "kind": "one_on_one",
                      "duration": 15,
                      "disabled": false,
                      "spot": "google_meet",
                      "spot_in_person_location": "91 Springboard, Sector 1, Noida",
                      "spot_custom_text": "Join the meeting via Google Meet or visit our Noida office",
                      "spot_phone_call_number": null,
                      "is_template": false,
                      "schedulable_range_type": "number_of_days_into_the_future",
                      "schedulable_range_value": "60",
                      "lead_time": 240,
                      "start_time_increment": 30,
                      "created_at": "2024-12-23T05:05:27.037Z",
                      "updated_at": "2025-03-31T13:22:19.832Z",
                      "deleted_at": null,
                      "is_multiple_spots_allowed": false,
                      "is_multiple_durations_allowed": true,
                      "conditional_pricing_enabled": false,
                      "is_email_reminders_enabled": true,
                      "is_sms_reminders_enabled": false,
                      "organization_id": "939a070d-191a-4fe6-9e41-023418a3dce8",
                      "rescheduling_lead_time": 0,
                      "cancellation_lead_time": 0,
                      "booking_modification_allowed": true,
                      "cancellation_too_late_notice": null,
                      "cancellation_policy": null,
                      "rescheduling_too_late_notice": null,
                      "pre_booking_allowed": false,
                      "original_price_enabled": false,
                      "original_price": null,
                      "fees": [],
                      "durations_possible": [
                        15,
                        30,
                        60
                      ]
                    }
                  ],
                  "pagination": {
                    "total_records": 1,
                    "total_pages": 1,
                    "current_page_number": 1,
                    "page_size": 30
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a scheduling link",
        "tags": [
          "Scheduling links"
        ],
        "description": "This API allows to create a scheduling link. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "Slug of the new scheduling link. This value should be unique.",
                    "example": "meeting-with-oliver-smith"
                  },
                  "name": {
                    "type": "string",
                    "description": "New name of the scheduling link.",
                    "example": "Meeting with Oliver Smith"
                  },
                  "description": {
                    "type": "string",
                    "description": "New description of the scheduling link.",
                    "example": "Discuss project updates"
                  },
                  "hosts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Emails of the hosts of scheduling link in array format.",
                    "example": [
                      "oliver@example.com",
                      "jane@example.com"
                    ]
                  },
                  "kind": {
                    "type": "string",
                    "description": "Kind of scheduling link. Available kinds are one_on_one, round_robin, and multihost. Defaults to one_on_one.",
                    "example": "one_on_one"
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Duration of the scheduling link in minutes.",
                    "example": 30
                  },
                  "start_time_increment": {
                    "type": "integer",
                    "description": "Start time increment for the scheduling link in minutes. Defaults to 30.",
                    "example": 30
                  }
                },
                "required": [
                  "slug",
                  "name",
                  "hosts",
                  "duration"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "availabilities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "availability_id": {
                            "type": "string"
                          },
                          "member_id": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "sid": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "default": {
                            "type": "boolean"
                          },
                          "after_buffer_time": {
                            "type": "integer"
                          },
                          "before_buffer_time": {
                            "type": "integer"
                          },
                          "periods": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "wday": {
                                  "type": "string"
                                },
                                "start_time": {
                                  "type": "string"
                                },
                                "end_time": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/meetings/{meeting_sid}": {
      "get": {
        "summary": "Get details of a scheduling link",
        "tags": [
          "Scheduling links"
        ],
        "description": "This API allows you to fetch details of a specific scheduling link by its SID. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "meeting_sid",
            "description": "The unique SID of the scheduling link you want to fetch.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vj5pgkh"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "404": {
            "description": "Not Found - Meeting not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update a scheduling link",
        "tags": [
          "Scheduling links"
        ],
        "description": "This API allows to update a scheduling link. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "meeting_sid",
            "description": "Id of the scheduling link you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "vj5pgkh"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "New slug of the scheduling link. This value should be unique.",
                    "example": "meeting-with-oliver-smith-new"
                  },
                  "name": {
                    "type": "string",
                    "description": "New name of the scheduling link.",
                    "example": "Meeting with Oliver Smith"
                  },
                  "description": {
                    "type": "string",
                    "description": "New description of the scheduling link.",
                    "example": "Discuss project updates"
                  },
                  "hosts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Emails of the hosts of scheduling link in array format.",
                    "example": [
                      "oliver@example.com",
                      "jane@example.com"
                    ]
                  },
                  "kind": {
                    "type": "string",
                    "description": "Kind of scheduling link. Available kinds are one_on_one, round_robin, and multihost. Defaults to one_on_one.",
                    "example": "one_on_one"
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Duration of the scheduling link in minutes.",
                    "example": 30
                  },
                  "start_time_increment": {
                    "type": "integer",
                    "description": "Start time increment for the scheduling link in minutes. Defaults to 30.",
                    "example": 30
                  }
                },
                "required": [
                  "hosts"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "meeting": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "sid": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string"
                        },
                        "duration": {
                          "type": "integer"
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "spot": {
                          "type": "string"
                        },
                        "spot_in_person_location": {
                          "type": "string",
                          "nullable": true
                        },
                        "spot_custom_text": {
                          "type": "string",
                          "nullable": true
                        },
                        "is_template": {
                          "type": "boolean"
                        },
                        "schedulable_range_type": {
                          "type": "string"
                        },
                        "schedulable_range_value": {
                          "type": "string"
                        },
                        "lead_time": {
                          "type": "integer"
                        },
                        "start_time_increment": {
                          "type": "integer"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "deleted_at": {
                          "type": "string",
                          "nullable": true
                        },
                        "is_multiple_spots_allowed": {
                          "type": "boolean"
                        },
                        "is_multiple_durations_allowed": {
                          "type": "boolean"
                        },
                        "conditional_pricing_enabled": {
                          "type": "boolean"
                        },
                        "is_email_reminders_enabled": {
                          "type": "boolean"
                        },
                        "is_sms_reminders_enabled": {
                          "type": "boolean"
                        },
                        "organization_id": {
                          "type": "string"
                        },
                        "rescheduling_lead_time": {
                          "type": "integer"
                        },
                        "cancellation_lead_time": {
                          "type": "integer"
                        },
                        "booking_modification_allowed": {
                          "type": "boolean"
                        },
                        "cancellation_too_late_notice": {
                          "type": "string",
                          "nullable": true
                        },
                        "cancellation_policy": {
                          "type": "string",
                          "nullable": true
                        },
                        "rescheduling_too_late_notice": {
                          "type": "string",
                          "nullable": true
                        },
                        "pre_booking_allowed": {
                          "type": "boolean"
                        },
                        "original_price_enabled": {
                          "type": "boolean"
                        },
                        "original_price": {
                          "type": "number",
                          "nullable": true
                        },
                        "durations_possible": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/meetings/{meeting_sid}/create_one_off_link": {
      "post": {
        "summary": "Create a One-time scheduling link",
        "tags": [
          "Scheduling links"
        ],
        "description": "This API allows to create a One-time scheduling link. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "meeting_sid",
            "description": "You need to pass the `sid` of the scheduling link to get one-time scheduling link. You can get `sid` in different ways. Visit the scheduling link page and then click on \"Settings\" > \"Show SID\". That will give you `sid`. The other way you can get `sid` is by listing scheduling links using our List all scheduling links API. Here you will see `sid` for each scheduling link.\n",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "vj5pgkh"
          }
        ],
        "requestBody": {
          "content": "application/json"
        },
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "slug": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "slug": "one-off-c5530bc7c9ab",
                  "url": "https://spinkart.neetocal.com/one-off-c5530bc7c9ab"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/team_members": {
      "get": {
        "summary": "List all team members",
        "tags": [
          "Team Members"
        ],
        "description": "This API allows to list all team members in the workspace. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team_members": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "first_name": {
                            "type": "string"
                          },
                          "last_name": {
                            "type": "string"
                          },
                          "time_zone": {
                            "type": "string"
                          },
                          "profile_image_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "active": {
                            "type": "boolean"
                          },
                          "organization_role": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total_records": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "current_page": {
                          "type": "integer"
                        },
                        "page_size": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Add team members",
        "tags": [
          "Team Members"
        ],
        "description": "This API allows to add team members in the workspace. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organization_role": {
                    "type": "string",
                    "description": "Role that should be assigned to the new team members. It must be a valid role from the \"Roles\" section in the settings page. The default is \"Standard\".",
                    "example": "Standard"
                  },
                  "emails": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Emails of the team members to be added in the workspace in array format. Must be valid emails.",
                    "example": [
                      "oliver@example.com",
                      "jane@example.com"
                    ]
                  }
                },
                "required": [
                  "emails"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Users added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/team_members/{team_member_id}": {
      "patch": {
        "summary": "Update team member details",
        "tags": [
          "Team Members"
        ],
        "description": "This API allows to update the details of a team member in the organization. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "team_member_id",
            "description": "Id of the team member that you want to update.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "13c02be6-8bd4-4dda-b9e6-07df53feb8a4"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email of the team member.",
                    "example": "oliver@spinkart.com"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name of the team member.",
                    "example": "Oliver"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the team member.",
                    "example": "Smith"
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "Time zone for the team member. It should be a valid time zone.",
                    "example": "Asia/Kolkata"
                  },
                  "organization_role": {
                    "type": "string",
                    "description": "Organization role for the team member. This value should be one of the organization roles of your workspace. The list of organization roles can be seen in Roles page. This value is case sensitive.",
                    "example": "Admin"
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Whether the team member is active or not.",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team_member": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "time_zone": {
                          "type": "string"
                        },
                        "profile_image_url": {
                          "type": "string",
                          "nullable": true
                        },
                        "active": {
                          "type": "boolean"
                        },
                        "organization_role": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/meetings/{meeting_sid}/availability": {
      "post": {
        "summary": "Update the availability for a scheduling link.",
        "tags": [
          "Availabilities"
        ],
        "description": "This API allows to update the availability used in a scheduling link. Note that if the availability is used elsewhere, that would also be updated. Replace `spinkart` with your workspace's subdomain.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "meeting_sid",
            "description": "Id of the scheduling link can be retrieved by going to the particular scheduling link page, and copying it from the URL.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a8yjkzb"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "periods": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "wday": {
                          "type": "string",
                          "description": "The weekday (e.g., \"monday\", \"tuesday\", etc.)."
                        },
                        "start_time": {
                          "type": "string",
                          "description": "Start time in \"HH:MM AM/PM\" format."
                        },
                        "end_time": {
                          "type": "string",
                          "description": "End time in \"HH:MM AM/PM\" format."
                        }
                      }
                    },
                    "example": [
                      {
                        "wday": "monday",
                        "start_time": "09:00 AM",
                        "end_time": "05:00 PM"
                      },
                      {
                        "wday": "tuesday",
                        "start_time": "11:00 AM",
                        "end_time": "04:00 PM"
                      }
                    ]
                  }
                },
                "required": [
                  "periods"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Meeting updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "meeting": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "sid": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string"
                        },
                        "duration": {
                          "type": "integer"
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "spot": {
                          "type": "string"
                        },
                        "spot_in_person_location": {
                          "type": "string",
                          "nullable": true
                        },
                        "spot_custom_text": {
                          "type": "string",
                          "nullable": true
                        },
                        "is_template": {
                          "type": "boolean"
                        },
                        "schedulable_range_type": {
                          "type": "string"
                        },
                        "schedulable_range_value": {
                          "type": "string"
                        },
                        "lead_time": {
                          "type": "integer"
                        },
                        "start_time_increment": {
                          "type": "integer"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "deleted_at": {
                          "type": "string",
                          "nullable": true
                        },
                        "is_multiple_spots_allowed": {
                          "type": "boolean"
                        },
                        "is_multiple_durations_allowed": {
                          "type": "boolean"
                        },
                        "conditional_pricing_enabled": {
                          "type": "boolean"
                        },
                        "is_email_reminders_enabled": {
                          "type": "boolean"
                        },
                        "is_sms_reminders_enabled": {
                          "type": "boolean"
                        },
                        "organization_id": {
                          "type": "string"
                        },
                        "rescheduling_lead_time": {
                          "type": "integer"
                        },
                        "cancellation_lead_time": {
                          "type": "integer"
                        },
                        "booking_modification_allowed": {
                          "type": "boolean"
                        },
                        "cancellation_too_late_notice": {
                          "type": "string",
                          "nullable": true
                        },
                        "cancellation_policy": {
                          "type": "string",
                          "nullable": true
                        },
                        "rescheduling_too_late_notice": {
                          "type": "string",
                          "nullable": true
                        },
                        "pre_booking_allowed": {
                          "type": "boolean"
                        },
                        "original_price_enabled": {
                          "type": "boolean"
                        },
                        "original_price": {
                          "type": "number",
                          "nullable": true
                        },
                        "durations_possible": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/discount_codes": {
      "post": {
        "summary": "Create a discount code",
        "tags": [
          "Discount codes"
        ],
        "description": "This API allows to create a discount code.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "Bearer token for API access.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Code of the new code. This value should be unique.",
                    "example": "OFF50"
                  },
                  "value": {
                    "type": "integer",
                    "description": "Value of the discount code. This value should be between 1-100 if kind is percentage.",
                    "example": 50
                  },
                  "kind": {
                    "type": "string",
                    "description": "Type of the discount code. Either fixed or percentage.",
                    "example": "percentage"
                  },
                  "redeems_limit": {
                    "type": "integer",
                    "description": "Number of times the discount code can be redeemed. If left empty, the discount can be redeemed unlimited times.",
                    "example": 10
                  },
                  "redeems_limit_by_email": {
                    "type": "integer",
                    "description": "Number of times the discount code can be redeemed by using a particular email. If left empty, the discount can be redeemed unlimited times.",
                    "example": 5
                  },
                  "expires_at": {
                    "type": "string",
                    "description": "Date upto which the discount code can be used. If left empty, discount code can be used forever. It should be of the format \"DD-MM-YYYY\"",
                    "example": "12-05-2025"
                  },
                  "days_valid_after_first_use_per_client": {
                    "type": "string",
                    "description": "Number of days upto which the discount code can be used by a particular client after their first use. If left empty, the discount code can be used forever.",
                    "example": 7
                  },
                  "allowed_emails": {
                    "type": "array",
                    "description": "Array of allowed email addresses that can redeem the discount code. If left empty, the discount code can be redeemed using any email IDs.",
                    "example": [
                      "eve@bigbinary.com",
                      "charlie@bigbinary.com"
                    ]
                  },
                  "meeting_ids": {
                    "type": "array",
                    "description": "Array of meeting IDs in which the discount code can be used in.",
                    "example": [
                      "ktr8qu3",
                      "xzfpwqg",
                      "csesbjq",
                      "c64h5yx"
                    ]
                  }
                },
                "required": [
                  "code",
                  "value",
                  "kind"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Discount code creation successful"
                    },
                    "discount_code": {
                      "type": "object",
                      "description": "Details of the created discount code.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the created discount code.",
                          "example": "362a026a-06b4-4ec2-90d6-1932aad8c86c"
                        },
                        "code": {
                          "type": "string",
                          "description": "The unique discount code created.",
                          "example": "OFF50"
                        },
                        "value": {
                          "type": "integer",
                          "description": "Value of the discount.",
                          "example": 50
                        },
                        "kind": {
                          "type": "string",
                          "description": "Type of the discount (fixed or percentage).",
                          "example": "percentage"
                        },
                        "redeems_limit": {
                          "type": "integer",
                          "description": "Number of times the discount code can be redeemed.",
                          "example": 10
                        },
                        "redeems_limit_by_email": {
                          "type": "integer",
                          "description": "Number of times the discount code can be redeemed per email.",
                          "example": 5
                        },
                        "expires_at": {
                          "type": "string",
                          "description": "Expiration date of the discount code.",
                          "example": "12-05-2025"
                        },
                        "days_valid_after_first_use_per_client": {
                          "type": "string",
                          "description": "Number of days the discount code is valid for a client after the first use.",
                          "example": 7
                        },
                        "allowed_emails": {
                          "type": "array",
                          "description": "Array of allowed emails that can redeem the discount code.",
                          "example": [
                            "eve@bigbinary.com",
                            "charlie@bigbinary.com"
                          ]
                        },
                        "meeting_ids": {
                          "type": "array",
                          "description": "Array of meeting IDs where the discount code can be used.",
                          "example": [
                            "ktr8qu3",
                            "xzfpwqg",
                            "csesbjq",
                            "c64h5yx"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/packages": {
      "get": {
        "summary": "List all packages",
        "tags": [
          "Packages"
        ],
        "description": "This API allows to list all packages.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "Bearer token for API access.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "packages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": "array",
                          "id": {
                            "type": "string",
                            "example": "aff17ff8-1bf8-4e77-a3c5-2f86104f9a20"
                          },
                          "name": {
                            "type": "string",
                            "example": "test 1"
                          },
                          "slug": {
                            "type": "string",
                            "example": "test-1"
                          },
                          "status": {
                            "type": "string",
                            "example": "enabled"
                          },
                          "duration": {
                            "type": "integer",
                            "example": 300
                          },
                          "fee": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "a5fe0440-d6e5-4df2-996e-b88ed030f4ac"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "example": "102.0"
                                  },
                                  "currency": {
                                    "type": "string",
                                    "example": "inr"
                                  },
                                  "payment_provider": {
                                    "type": "string",
                                    "example": "stripe"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "example": "fixed"
                                  },
                                  "min_amount": {
                                    "type": "string",
                                    "example": "102.0"
                                  },
                                  "taxes": {
                                    "type": "array",
                                    "items": {},
                                    "example": []
                                  },
                                  "is_default": {
                                    "type": "boolean",
                                    "example": true
                                  },
                                  "display_amount": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": null
                                  },
                                  "is_tax_enabled": {
                                    "type": "boolean",
                                    "example": false
                                  },
                                  "is_tip_enabled": {
                                    "type": "boolean",
                                    "example": false
                                  },
                                  "is_tax_applicable_on_tip": {
                                    "type": "boolean",
                                    "example": false
                                  },
                                  "vpas": {
                                    "type": "array",
                                    "items": {},
                                    "example": []
                                  },
                                  "amount_in_smallest_currency_unit": {
                                    "type": "integer",
                                    "example": 10200
                                  }
                                }
                              },
                              {
                                "type": "array",
                                "items": {},
                                "example": []
                              }
                            ],
                            "description": "Fee details for the package. Can be an object or an empty array."
                          }
                        }
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/packages/{package_id}": {
      "get": {
        "summary": "Get a package",
        "tags": [
          "Packages"
        ],
        "description": "This API allows to get a package.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "Bearer token for API access.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "package": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the package",
                          "example": "test 1"
                        },
                        "slug": {
                          "type": "string",
                          "description": "Slug of the package",
                          "example": "test-1"
                        },
                        "status": {
                          "type": "string",
                          "description": "Status of the package",
                          "example": "enabled"
                        },
                        "duration": {
                          "type": "integer",
                          "description": "Duration of the package in seconds",
                          "example": 300
                        },
                        "fee": {
                          "type": "object",
                          "description": "Fee details for the package",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "a5fe0440-d6e5-4df2-996e-b88ed030f4ac"
                            },
                            "amount": {
                              "type": "string",
                              "example": "102.0"
                            },
                            "currency": {
                              "type": "string",
                              "example": "inr"
                            },
                            "payment_provider": {
                              "type": "string",
                              "example": "stripe"
                            },
                            "kind": {
                              "type": "string",
                              "example": "fixed"
                            },
                            "min_amount": {
                              "type": "string",
                              "example": "102.0"
                            },
                            "taxes": {
                              "type": "array",
                              "items": {},
                              "example": []
                            },
                            "is_default": {
                              "type": "boolean",
                              "example": true
                            },
                            "display_amount": {
                              "type": "string",
                              "nullable": true,
                              "example": null
                            },
                            "is_tax_enabled": {
                              "type": "boolean",
                              "example": false
                            },
                            "is_tip_enabled": {
                              "type": "boolean",
                              "example": false
                            },
                            "is_tax_applicable_on_tip": {
                              "type": "boolean",
                              "example": false
                            },
                            "vpas": {
                              "type": "array",
                              "items": {},
                              "example": []
                            },
                            "amount_in_smallest_currency_unit": {
                              "type": "integer",
                              "example": 10200
                            }
                          }
                        },
                        "meetings": {
                          "type": "array",
                          "description": "List of meetings included in the package",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "06391a88-183f-40df-8dd3-ab8b29e5b066"
                              },
                              "name": {
                                "type": "string",
                                "example": "Meeting with Oliver Smith"
                              },
                              "sid": {
                                "type": "string",
                                "example": "u9fxy4t"
                              }
                            }
                          }
                        },
                        "purchases": {
                          "type": "array",
                          "description": "List of purchases for the package",
                          "items": {},
                          "example": []
                        },
                        "total_purchases_count": {
                          "type": "integer",
                          "description": "Total number of purchases for the package",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/forms": {
      "get": {
        "summary": "List all forms",
        "tags": [
          "Forms"
        ],
        "description": "This API allows to list all the forms in a workspace.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_number",
            "description": "Page number. The default value is 1.",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of forms to receive. The default value is 30.",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "forms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "is_published": {
                                "type": "boolean"
                              },
                              "state": {
                                "type": "string"
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "$ref": "#/paths/~1forms/get/responses/200/content/application~1json/schema/allOf/0/properties/forms/items/properties/created_at"
                              },
                              "submissions_count": {
                                "type": "integer"
                              },
                              "attempt_url": {
                                "type": "string"
                              },
                              "is_archived": {
                                "type": "boolean"
                              },
                              "is_disabled": {
                                "type": "boolean"
                              },
                              "is_suspended": {
                                "type": "boolean"
                              },
                              "created_by": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total_records": {
                              "type": "integer",
                              "description": "Total number of records"
                            },
                            "total_pages": {
                              "type": "integer",
                              "description": "Total number of pages available"
                            },
                            "current_page_number": {
                              "type": "integer",
                              "description": "Current page number"
                            },
                            "page_size": {
                              "type": "integer",
                              "description": "Number of records per page"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/forms/{form_id}/submissions": {
      "get": {
        "summary": "List all submissions",
        "tags": [
          "Submissions"
        ],
        "description": "This API allows to list all the submissions of a specified form in a workspace.",
        "parameters": [
          {
            "in": "header",
            "name": "X-Api-Key",
            "description": "You can generate an API key from the [NeetoCal API Keys dashboard](https://help.neetocal.com/articles/api-keys).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "form_id",
            "description": "Id of the form can be retrieved by going to the particular form, and copying it from the URL.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_number",
            "description": "Page number. The default value is 1.",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of submissions to receive. The default value is 30.",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "submissions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "created_at": {
                                "$ref": "#/paths/~1forms/get/responses/200/content/application~1json/schema/allOf/0/properties/forms/items/properties/created_at"
                              },
                              "field_values": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "user_agent": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "version": {
                                    "type": "string"
                                  },
                                  "ip_address": {
                                    "type": "string"
                                  },
                                  "device_name": {
                                    "type": "string"
                                  },
                                  "device_type": {
                                    "type": "string"
                                  },
                                  "operating_system": {
                                    "type": "string"
                                  },
                                  "operating_system_version": {
                                    "type": "string"
                                  },
                                  "submission_id": {
                                    "type": "string"
                                  },
                                  "created_at": {
                                    "$ref": "#/paths/~1forms/get/responses/200/content/application~1json/schema/allOf/0/properties/forms/items/properties/created_at"
                                  },
                                  "updated_at": {
                                    "$ref": "#/paths/~1forms/get/responses/200/content/application~1json/schema/allOf/0/properties/forms/items/properties/created_at"
                                  }
                                }
                              },
                              "responses": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "label": {
                                      "type": "string"
                                    },
                                    "position": {
                                      "type": "integer"
                                    },
                                    "kind": {
                                      "type": "string"
                                    },
                                    "slug": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "pagination": {
                          "$ref": "#/paths/~1forms/get/responses/200/content/application~1json/schema/allOf/0/properties/pagination"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing/Invalid parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}
